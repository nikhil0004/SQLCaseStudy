CREATE TABLE users21 (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_STATUS VARCHAR(20) NOT NULL
);

CREATE TABLE logins (
    USER_ID INT,
    LOGIN_TIMESTAMP DATETIME NOT NULL,
    SESSION_ID INT PRIMARY KEY,
    SESSION_SCORE INT,
    FOREIGN KEY (USER_ID) REFERENCES users21(USER_ID)
);



-- Users Table
INSERT INTO USERS21 VALUES (1, 'Alice', 'Active');
INSERT INTO USERS21 VALUES (2, 'Bob', 'Inactive');
INSERT INTO USERS21 VALUES (3, 'Charlie', 'Active');
INSERT INTO USERS21  VALUES (4, 'David', 'Active');
INSERT INTO USERS21  VALUES (5, 'Eve', 'Inactive');
INSERT INTO USERS21  VALUES (6, 'Frank', 'Active');
INSERT INTO USERS21  VALUES (7, 'Grace', 'Inactive');
INSERT INTO USERS21  VALUES (8, 'Heidi', 'Active');
INSERT INTO USERS21 VALUES (9, 'Ivan', 'Inactive');
INSERT INTO USERS21 VALUES (10, 'Judy', 'Active');

-- Logins Table 

INSERT INTO LOGINS  VALUES (1, '2023-07-15 09:30:00', 1001, 85);
INSERT INTO LOGINS VALUES (2, '2023-07-22 10:00:00', 1002, 90);
INSERT INTO LOGINS VALUES (3, '2023-08-10 11:15:00', 1003, 75);
INSERT INTO LOGINS VALUES (4, '2023-08-20 14:00:00', 1004, 88);
INSERT INTO LOGINS  VALUES (5, '2023-09-05 16:45:00', 1005, 82);

INSERT INTO LOGINS  VALUES (6, '2023-10-12 08:30:00', 1006, 77);
INSERT INTO LOGINS  VALUES (7, '2023-11-18 09:00:00', 1007, 81);
INSERT INTO LOGINS VALUES (8, '2023-12-01 10:30:00', 1008, 84);
INSERT INTO LOGINS  VALUES (9, '2023-12-15 13:15:00', 1009, 79);


-- 2024 Q1
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1011, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2024-01-25 09:30:00', 1012, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-02-05 11:00:00', 1013, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2024-03-01 14:30:00', 1014, 91);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-03-15 16:00:00', 1015, 83);

INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2024-04-12 08:00:00', 1016, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (7, '2024-05-18 09:15:00', 1017, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (8, '2024-05-28 10:45:00', 1018, 87);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (9, '2024-06-15 13:30:00', 1019, 76);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-25 15:00:00', 1010, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-26 15:45:00', 1020, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-27 15:00:00', 1021, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-28 15:45:00', 1022, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1101, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-01-25 09:30:00', 1102, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-01-15 11:00:00', 1103, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2023-11-10 07:45:00', 1201, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2023-11-25 09:30:00', 1202, 84);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2023-11-15 11:00:00', 1203, 80);
--Q1) MANAGEMENT WANT TO SEE ALL THE USERS THAT DID NOT LOGIN IN THE PAST 5 MONTHS :RETURN USERNAME
WITH cte AS (
    SELECT USER_ID, max(LOGIN_TIMESTAMP) AS MAX,DATEDIFF(MONTH, MAX(LOGIN_TIMESTAMP), GETDATE()) AS DATEDIFFE
    FROM LOGINS GROUP BY USER_ID
)
SELECT USER_ID, MAX
FROM cte
WHERE DATEDIFFE >= 5;

--Q2)FOR THE BUSINESS UNIT'S QUARTERLY ANALYSIS ,CALCULATE HOW MANY USERS AND HOW MANY SESSIONS WERE AT EACH QUARTER 
--ORDER BY QUARTER FROM NEAREST TO OLDEST .
--RETURN :first day of the quarter ,user_cnt,session _cnt

select  min(LOGIN_TIMESTAMP) as first_date,DATEPART(quarter,LOGIN_TIMESTAMP)AS quarter ,count(*) as total_session,count (distinct user_id) as total_user ,
datetrunc(quarter, min(LOGIN_TIMESTAMP)) as trunc_date
from LOGINS group by DATEPART(quarter,LOGIN_TIMESTAMP);

--Q3)DISPLAY USER ID'S THAT LOG IN IN JAN 2024 AND DID NOT LOGIN -IN ON NONVEMBER 2023
--RETURN USER-ID'S

select distinct user_id as user_id from LOGINS WHERE LOGIN_TIMESTAMP BETWEEN '2024-01-01' AND '2024-01-31' and user_id not in 

(select user_id from LOGINS WHERE LOGIN_TIMESTAMP BETWEEN '2023-11-01' AND '2023-11-30')

--Q4)ADD THE QUERY FROM 2 THE PERCENTAGE CHANGE IN SESSIONS FROM LAST QUARTER
--RETURN:first day of the quarter ,session_cnt ,session prev ,session_percentage _change
with cte as(
select  min(LOGIN_TIMESTAMP) as first_date,DATEPART(quarter,LOGIN_TIMESTAMP)AS quarter ,count(*) as total_session,count (distinct user_id) as total_user ,
datetrunc(quarter, min(LOGIN_TIMESTAMP)) as trunc_date
from LOGINS group by DATEPART(quarter,LOGIN_TIMESTAMP))
select * ,lag(total_session)over(order by trunc_date) as lag1,100.0*( total_session-(lag(total_session)over(order by trunc_date)))/(lag(total_session)over(order by trunc_date))as diff from cte ;

--Q5)DISPLAY THE USER THAT HAD THE HIGHEST SESSION SCORE (MAX) FOR EACH DAY
--RETURN: Date,username,score

with cte as(
SELECT l.user_id as user_id,day(l.LOGIN_TIMESTAMP )as day,l.SESSION_SCORE as max_session,u.USER_NAME  as username
FROM logins L inner join users21 u on u.USER_ID=l.USER_ID )
select user_id,day,max(max_session) as max_sess,username from cte group by day,user_id ,username order by user_id,max(max_session)desc;

--Q6)TO IDENTIFY OUR BEST USERS -REtURN THE USERS THAT HAD A SESSION ON SINGLE DAY SINCE THEIR FIRST LOGIN
--RETURN :user_id
select * from Logins order by user_id
with cte as(
select * , lead(LOGIN_TIMESTAMP)OVER(partition by USER_ID Order by LOGIN_TIMESTAMP) AS daylead ,
lag(LOGIN_TIMESTAMP)OVER(partition by USER_ID Order by User_id) AS daylag from logins ),cte2 as (
select * ,datediff(day ,LOGIN_TIMESTAMP,daylead) as day_diffl ,datediff(month ,LOGIN_TIMESTAMP,daylead) as month_diffl,
datediff(year ,LOGIN_TIMESTAMP,daylead) as year_diffl,datediff(day ,daylag,LOGIN_TIMESTAMP) as day_diffla ,datediff(month ,daylag,LOGIN_TIMESTAMP) as month_diffla,
datediff(year ,daylag,LOGIN_TIMESTAMP) as year_diffla from cte )
select * from cte2 where day_diffl in (1,NULL) or day_diffla in(1,null)  order by LOGIN_TIMESTAMP,USER_ID;

--Q7)ON WAHT DATES THERE WERE NO LOG-IN AT ALL?
--RETURN:LOGIN_DATES
--by using recursive sql
with cte as(
select cast(min(LOGIN_TIMESTAMP)as date)as first_date,cast(getdate() as date )as last_date from logins
union all select dateadd(day,1,first_date) as first_date,last_date from cte  
where first_date<last_date)
select * from cte 
where first_date not in 
(select distinct cast (LOGIN_TIMESTAMP AS date) from logins)
option (maxrecursion 500)